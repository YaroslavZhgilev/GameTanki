#include <SFML/Graphics.hpp> 
#include <iostream>
#include <cmath>
#include <sstream>
#include "map.h" //подключили код с картой 
 
using namespace sf;//включаем пространство имен sf, чтобы постоянно не писать 

////////////////////////////////////////////////////КЛАСС ИГРОКА//////////////////////// 
class Player { // класс Игрока 
public:  float x, y, w, h, dx, dy, speed; //координаты игрока х и у, высота и ширина,        
		 //ускорение (по х и по у), сама скорость  
		 int playerScore;//новая переменная, хранящая очки игрока 
		 int dir; //направление (direction) движения игрока  
		 std::string File; //файл с расширением  
		 Image image;//сфмл изображение  
		 Texture texture;//сфмл текстура  
		 Sprite sprite;//сфмл спрайт 
		 //Конструктор с параметрами для класса Player. При создании объекта класса мы будем задавать 
		 //имя файла, координату Х и У, ширину и высоту 
		 Player(std::string F, float X, float Y, float W, float H){
			 dir = 0; speed = 0; playerScore = 0; 
			 File = F; //имя файла+расширение  
			 w = W; 
			 h = H; //высота и ширина  
			 image.loadFromFile("images/" + File);//загружаем в image изображение, вместо File  
			 //передадим то, что пропишем при создании объекта. В нашем случае это "hero.png". Получится  
			 //запись, идентичная image.loadFromFile("images/hero/png");  
			 image.createMaskFromColor(Color(41, 33, 59)); //убираем ненужный темно-синий цвет 
			 texture.loadFromImage(image); //заносим наше изображение в текстуру  
			 sprite.setTexture(texture); //заливаем спрайт текстурой  
			 x = X; 
			 y = Y; //координата появления спрайта        
			 speed= 0;        
			 dir= 0;  
			 sprite.setTextureRect(IntRect(0, 0, w, h)); //Задаем спрайту один прямоугольник для  //вывода одного льва. IntRect – для приведения типов 
}
		 void update(float time) //функция "оживления/обновления" объекта класса. Принимает в себя   
			 //время SFML, вследствие чего работает бесконечно, давая персонажу движение. 
		 {  
			 switch (dir)//реализуем поведение в зависимости от направления. Каждая цифра 
				 //соответствует направлению.  
			 {
				case 0: dx = speed; dy = 0; break; //по “X” задаем положительную скорость, по “Y” - 0.         
					//Персонаж идет только вправо.  
				case 1: dx = -speed; dy = 0; break;//по “X” задаем отрицательную скорость, по и “Y” – 0.      
					//Персонаж идет только влево.  
				case 2: dx = 0; dy = speed; break;//по “X” задаем нулевое значение, по “Y”     
					//положительное. Получается, что персонаж идет только вниз  
				case 3: dx = 0; dy = -speed; break;//по “X” задаем нулевое значение, по “Y”    
					//отрицательное. Получается, что персонаж идет только вверх  
			 } 
 
		 x += dx*time; //движение по “X”  
		 y += dy*time; //движение по “Y”  
		 speed = 0;    //обнуляем скорость, чтобы персонаж остановился. 
		 sprite.setPosition(x, y); //выводим спрайт в позицию (x, y).     
		 //бесконечно выводим в этой функции, иначе бы наш спрайт стоял на месте.
		 interactionWithMap();//вызываем функцию, отвечающую за взаимодействие с картой 
		 }

		 void interactionWithMap()//ф-ция взаимодействия с картой 
		 {
			 //Проходим только по тем тайлам (квадратикам размера 32*32), которые контактируют с игроком. //Частично или полностью находятся под изображением игрока!   
			 for (int i = y / 32; i < (y + h) / 32; i++)   
				 for (int j = x / 32; j<(x + w) / 32; j++){ 
					 //”x” делим на 32, тем самым получаем левый квадратик, с которым персонаж соприкасается. 
					 //Он ведь больше размера 32*32, поэтому может одновременно стоять на нескольких тайлах 
					 //Кроме того, j<(x + w)/32 - условие ограничения координат по “x”, т.е. координата самого 
					 //правого квадрата, который соприкасается с персонажем. таким образом идем в цикле слева 
					 // направо по иксу, проходя от левого квадрата (соприкасающегося с героем), до правого 
					 // квадрата (соприкасающегося с героем)   
					 if (TileMap[i][j] == '0')//если наш квадратик соответствует символу “0”      
						 //(стена), то проверяем "направление скорости" персонажа:  
					 {   
						 if (dy>0) {
							 //если мы шли вниз,    
							 y = i * 32 - h;//то стопорим (-h) координату “y” персонажа.      
							 //сначала получаем координату “i” нашего квадратика на карте и     
							 //затем вычитаем из высоты спрайта персонажа.    
						 }    
						 if (dy<0){    
							 y = i * 32 + 32;//аналогично с движением вверх. 
						 }    
						 if (dx>0){    
							 x = j * 32 - w;//если идем вправо, то координата “x” равна         
							 //стена (символ 0) минус ширина персонажа    
						 }    
						 if (dx < 0){   
							 x = j * 32 + 32; //аналогично идем влево    
						 }   
					 }     
					 if (TileMap[i][j] == 's') { 
						 //если символ равен 's' (камень)     
						 playerScore++;//какое-то действие     
						 TileMap[i][j] = ' ';//убираем камень    
					 } 
				 }
}
};
int main() {  //Создаём окно   
	Player p("hero.png", 250, 250, 96.0, 96.0); //создаем объект “p” класса “Player”, //задаем "hero.png" как имя файла+расширение, далее координата Х,У, ширина, высота.

	sf::VideoMode desktop = sf::VideoMode::getDesktopMode();  
	sf::RenderWindow window(sf::VideoMode(640, 480, desktop.bitsPerPixel), "Lesson 6"); 


Font font;//шрифт   
font.loadFromFile("CyrilicOld.ttf");//передаем нашему шрифту файл шрифта  
Text text("", font, 20);//создаем объект текст. закидываем в объект текст строку, шрифт, размер шрифта(в пикселях);
//сам объект текст (не строка)  
text.setColor(Color::Red);//покрасили текст в красный. если убрать эту строку, то по умолчанию он белый  
text.setStyle(Text::Bold);//жирный текст.
	Image map_image;//объект изображения для карты 
	map_image.loadFromFile("images/map.png");//загружаем файл для карты 
	Texture map;//текстура карты 
	map.loadFromImage(map_image);//заряжаем текстуру картинкой  
	Sprite s_map;//создаём спрайт для карты 
	s_map.setTexture(map);//заливаем текстуру спрайтом 

	Image heroimage; //создаем объект Image (изображение)  
	heroimage.loadFromFile("images/hero.png");//загружаем в него файл 
 
	Texture herotexture;//создаем объект Texture (текстура)  
	herotexture.loadFromImage(heroimage);//передаем в него объект Image (изображения) 

	float CurrentFrame=0; //хранит текущий кадр 
	Clock clock;   //создаем переменную времени и одновременно запускаем часы!
 
	 Sprite herosprite;//создаем объект Sprite(спрайт)  
	 herosprite.setTexture(herotexture);//передаём в него объект Texture (текстуры)  
	 herosprite.setTextureRect(IntRect(0, 192, 96, 96));//получили нужный прямоугольник 
	 herosprite.setPosition(250, 250);//задаем начальные координаты появления спрайта 
 
 while (window.isOpen())  //Пока окно открыто  
	{   

		// дать время с последнего перезапуска часов, в данном случае время, прошедшее с              
		//предыдущей итерации и вызова restart();   
		float time = clock.getElapsedTime().asMicroseconds();    
		clock.restart(); //перезапуск часов   
		time = time / 800; //скорость игры   
		    
		 sf::Event event;   
		 while (window.pollEvent(event))  
			 {    
				 if (event.type == sf::Event::Closed)    
				 window.close();   
			} 
		 //"-0,1" - будем считать скоростью, умножаем её на наше время “time” и получаем    
		 //пройденное расстояние 
 
		 if ((Keyboard::isKeyPressed(Keyboard::Left) || (Keyboard::isKeyPressed(Keyboard::A)))) 
		 { 
			 p.dir = 1; p.speed = 0.1;//dir =1 - направление вверх, speed =0.1 - скорость движения.   
			 //Заметьте - время мы уже здесь ни на что не умножаем и нигде не используем каждый раз  
			 CurrentFrame += 0.005*time;  
			 if (CurrentFrame > 3) CurrentFrame -= 3;  
			 p.sprite.setTextureRect(IntRect(96 * int(CurrentFrame), 96, 96, 96)); //через объект p         
			 //класса player меняем спрайт, делая анимацию  
		 } 

		 if ((Keyboard::isKeyPressed(Keyboard::Right) || (Keyboard::isKeyPressed(Keyboard::D)))) 
		 {   
			 p.dir = 0; p.speed = 0.1;//направление вправо  
			 CurrentFrame += 0.005*time;  
			 if (CurrentFrame > 3) CurrentFrame -= 3; 
			 p.sprite.setTextureRect(IntRect(96 * int(CurrentFrame), 192, 96, 96)); //через объект p        
			 //класса player меняем спрайт, делая анимацию
 
		 }

		 if ((Keyboard::isKeyPressed(Keyboard::Up) || (Keyboard::isKeyPressed(Keyboard::W)))) 
		 {    
			 p.dir = 3; p.speed = 0.1;//направление вниз  
			 CurrentFrame += 0.005*time;  
			 if (CurrentFrame > 3) CurrentFrame -= 3; 
			 p.sprite.setTextureRect(IntRect(96 * int(CurrentFrame), 288, 96, 96)); //через объект p    
			 //класса player меняем спрайт, делая анимацию (используя оператор точку)   
		 } 

         if ((Keyboard::isKeyPressed(Keyboard::Down) || (Keyboard::isKeyPressed(Keyboard::S)))) 
		 {    
			 p.dir = 2; p.speed = 0.1;//направление вверх 
			 CurrentFrame += 0.005*time; 
			 if (CurrentFrame > 3) CurrentFrame -= 3; 
			 p.sprite.setTextureRect(IntRect(96 * int(CurrentFrame), 0, 96, 96));    
		 }

		 p.update(time); //оживляем объект “p” класса “Player” с помощью времени sfml, 
		 // передавая время в качестве параметра функции update. 
  window.clear(); //Очищаем экран   

  /////////////////////////////Рисуем карту///////////////////// 
  for (int i = 0; i < HEIGHT_MAP; i++) 
	  for (int j = 0; j < WIDTH_MAP; j++)  {  
		  if (TileMap[i][j] == ' ')  s_map.setTextureRect(IntRect(0, 0, 32, 32)); //если        
		  //встретили символ пробел, то рисуем 1-й квадратик   
		  if (TileMap[i][j] == 's')  s_map.setTextureRect(IntRect(32, 0, 32, 32));//если   
		  //встретили символ s, то рисуем 2й квадратик   
		  if ((TileMap[i][j] == '0')) s_map.setTextureRect(IntRect(64, 0, 32, 32));//если 
		  //встретили символ 0, то рисуем 3й квадратик 
 
  s_map.setPosition(j * 32, i * 32);//раскладываем квадратики в карту. 
 
  window.draw(s_map);//рисуем квадратики на экран 
	  }

	  std::ostringstream playerScoreString;  // объявили переменную  
	  playerScoreString << p.playerScore;//занесли в нее число очков, то есть формируем строку  
	  text.setString("Собрано камней:" + playerScoreString.str());//задаем строку тексту и       // вызываем сформированную выше строку методом .str() 
	  text.setPosition(50, 50);//задаем позицию текста, отступая от центра камеры  
	  window.draw(text);//рисую этот текст

  window.draw(p.sprite);//рисуем объект   
  window.display(); //Показываем объект на экране 
	 } 
 
 return 0; 
 } 